{
  "name": "MarkItOff",
  "tagline": "",
  "body": "##MarkITOFF\r\n\r\nA todo app built with AngularJS && Firebase user authentication.\r\n\r\n## Bloc Frontend Project \r\n\r\nA starter application for student projects in Bloc's [Frontend Web Development Course](https://www.bloc.io/frontend-development-bootcamp).\r\n\r\n## Configuration\r\n\r\nStart by cloning the repository:\r\n\r\n```\r\n$ git clone https://github.com/Bloc/bloc-frontend-project-starter.git <your-frontend-project-name>\r\n```\r\n\r\nThe project uses Grunt to run tasks in development. Thoroughly review our [resource on using Grunt](https://www.bloc.io/resources/using-grunt) before using this application. It may also help to review [our resource on NPM and `package.json` files](https://www.bloc.io/resources/npm-and-package-json).\r\n\r\nInstall the project dependencies by running:\r\n\r\n```\r\n$ npm install\r\n```\r\n\r\n## Run the Application\r\n\r\nRun the application using the Gruntfile's `default` task:\r\n\r\n```\r\n$ grunt\r\n```\r\n\r\nThe default task runs a simple server on port 3000. To view it in a any browser, go to [http://localhost:3000](http://localhost:3000).\r\n\r\n>Note that unless the application is run [via Live Preview in Brackets](#use-in-brackets-live-preview), the browser will need to be refreshed to view the most recent changes.\r\n\r\n### Using without Angular\r\n\r\nBy default, the application is configured to be used in a Single-Page Application (SPA) with AngularJS. If you're working on a project that doesn't use AngularJS, see the instructions below [for configuring the server to run in a non-SPA](#configure-server-for-non-spas).\r\n\r\n## Use in Brackets Live Preview\r\n\r\nTo use the application with the Live Preview functionality of the Brackets text editor, go to __File > Project Settings__ and add `http://localhost:3000` to the Base URL field.\r\n\r\n![Screenshot of project settings URL in Brackets](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/bloc-frontend-project-starter/live_preview_project_settings.png)\r\n\r\nThe text in the application will not update on every keystroke, but changes will automatically push when you save the file.\r\n\r\n## Directory Structure\r\n\r\n```\r\n├── Gruntfile.js\r\n├── LICENSE\r\n├── Procfile\r\n├── README.md\r\n├── app\r\n│   ├── assets\r\n│   │   └── images\r\n│   │       └── bloc-logo-white.png\r\n│   ├── pages\r\n│   │   └── index.html\r\n│   ├── scripts\r\n│   │   └── app.js\r\n│   ├── styles\r\n│   │   └── style.css\r\n│   └── templates\r\n│       └── home.html\r\n├── package.json\r\n└── server.js\r\n```\r\n\r\nAll code, styles, markup, and assets should be saved to the `app` directory. Saving changes creates a new directory, `dist`, that holds final copies of the application content. `dist` is the directory the server uses to serve the content displayed by the browser. __Do not edit files in `dist`__ because it will reset changes to your work every time you save. Restrict all edits to files in the `app` directory.\r\n\r\n### Assets/Images\r\n\r\nAdd images to the `app/assets/images` directory. To reference images in HTML, use the path `/assets/images/<image file name>.jpg`. For example, to include the image called `bloc-white-logo.png`, the path for the `src` attribute in the HTML would be:\r\n\r\n```html \r\n<img src=\"/assets/images/bloc-white-logo.png\">\r\n```\r\n\r\n__Note:__ A sample image has been added to `app/images`. To remove the image from the application, run the following command from the root of repo:\r\n\r\n```bash\r\n$ rm -f app/assets/images/bloc-white-logo.png\r\n```\r\n\r\nTo reference any other assets, like the music in Bloc Jams, use the path `assets/<asset-type>/<asset-file>`. The Gruntfile is pre-configured to handle assets in a subfolder with the `.mp3` extension.\r\n\r\n>See lines 14 and 35 of `Gruntfile.js` for the accepted file extensions of assets.\r\n\r\n### Difference between Pages and Templates\r\n\r\nThe `templates` directory should hold any HTML files used as templates in Angular states configured by UI Router. All other HTML files belong in the `pages` directory.\r\n\r\n### Procfile\r\n\r\nThe `Procfile` is a file for [providing instructions to Heroku servers](https://devcenter.heroku.com/articles/procfile) that run after pushing new code to the repository. __Do not change the contents of the Procfile__ or Heroku will throw an error when you attempt to visit your application.\r\n\r\n>For more information about how to use Heroku with Bloc's frontend applications, see our [resource on using Heroku](https://www.bloc.io/resources/using-heroku-frontend).\r\n\r\n## Configure Server for Non-SPAs\r\n\r\nBy default, `bloc-frontend-project-starter` is configured to be used with SPAs. If you're not building a project with Angular, then modify `server.js` with the following:\r\n\r\n```diff\r\nvar Hapi = require('hapi'),\r\n    path = require('path'),\r\n    port = process.env.PORT || 3000,\r\n    server = new Hapi.Server(port),\r\n    routes = {\r\n        css: {\r\n            method: 'GET',\r\n            path: '/styles/{path*}',\r\n            handler: createDirectoryRoute('styles')\r\n        },\r\n        js: {\r\n            method: 'GET',\r\n            path: '/scripts/{path*}',\r\n            handler: createDirectoryRoute('scripts')\r\n        },\r\n        assets: {\r\n            method: 'GET',\r\n            path: '/assets/{path*}',\r\n            handler: createDirectoryRoute('assets')\r\n        },\r\n        templates: {\r\n            method: 'GET',\r\n            path: '/templates/{path*}',\r\n            handler: createDirectoryRoute('templates')\r\n        },\r\n-        spa: {\r\n+        staticPages: {\r\n             method: 'GET',\r\n             path: '/{path*}',\r\n-            handler: {\r\n-                file: path.join(__dirname, '/dist/index.html')\r\n-            }\r\n+            handler: createDirectoryRoute('/')\r\n         }\r\n     };\r\n \r\n-server.route([ routes.css, routes.js, routes.images, routes.templates, routes.spa ]);\r\n+server.route([ routes.css, routes.js, routes.images, routes.templates, routes.staticPages ]);\r\n...\r\n```\r\n\r\nOptionally, delete the `templates` directory and all references to it in `Gruntfile.js` to remove unnecessary files (templates are only useful for SPAs). However, keeping them in the repository won't affect your application.\r\n\r\n## Grunt plugins\r\n\r\nA list of the Grunt plugins in this application.\r\n\r\n#### Watch\r\n\r\n[Grunt watch](https://github.com/gruntjs/grunt-contrib-watch) watches for changes to file content and then executes Grunt tasks when a change is detected.\r\n\r\n#### Copy\r\n\r\n[Grunt copy](https://github.com/gruntjs/grunt-contrib-copy) copies files from our development folders and puts them in the folder that will be served with the frontend of your application.\r\n\r\n#### Clean\r\n\r\n[Grunt clean](https://github.com/gruntjs/grunt-contrib-clean) \"cleans\" or removes all files in your distribution folder (`dist`) so that logic in your stylesheets, templates, or scripts isn't accidentally overridden by previous code in the directory.\r\n\r\n#### Hapi\r\n\r\n[Grunt Hapi](https://github.com/athieriot/grunt-hapi) runs a server using [`HapiJS`](http://hapijs.com/). Happy is a Node web application framework with robust configuration options.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}